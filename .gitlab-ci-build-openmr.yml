stages:
  - build
  - openMr
  - retagging
  - deploy

variables:
  USE_CONTAINER: "true"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:20.10.2-dind

# The build tasks are all exactly the same in all services
build:
  stage: build
  image: amirabdi/docker:19.03.7-git-awscli2
  before_script:
    - aws configure set region us-west-2
    - aws configure set aws_access_key_id $AWS_REGISTRY_ID
    - aws configure set aws_secret_access_key $AWS_REGISTRY_SECRET
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI_BASE
    - docker info
  script:
    - echo "Building the image"
    - export TAG_NAME=$CI_COMMIT_REF_SLUG-`git show -s --format=%ct HEAD`-`git rev-parse --short=8 HEAD`
    - echo $TAG_NAME
    - docker build -t $ECR_URI_BASE/offerland/$SERVICE_NAME:$TAG_NAME -t $ECR_URI_BASE/offerland/$SERVICE_NAME:$CI_COMMIT_REF_SLUG-latest .
    - echo "Push image to AWS ECR as $ECR_URI_BASE/offerland/$SERVICE_NAME"
    - docker push $ECR_URI_BASE/offerland/$SERVICE_NAME:$TAG_NAME
    - docker push $ECR_URI_BASE/offerland/$SERVICE_NAME:$CI_COMMIT_REF_SLUG-latest
  only:
    - development

# The Open Merge Request tasks are all exactly the same in all services
Open MR Staging:
  stage: openMr
  image: amirabdi/gitlab-auto-merge-request:1.1
  before_script: []
  variables:
    TARGET_BRANCH: staging
    GIT_STRATEGY: none # We do not need a clone of the GIT repository to create a Merge Request
  only:
    - development
  script:
    - bash merge-request.sh

# The Open Merge Request tasks are all exactly the same in all services
Open MR Production:
  stage: openMr
  image: amirabdi/gitlab-auto-merge-request:1.1
  before_script: []
  variables:
    TARGET_BRANCH: production
    GIT_STRATEGY: none # We do not need a clone of the GIT repository to create a Merge Request
  only:
    - staging
  script:
    - bash merge-request.sh

retag dev to staging:
  stage: retagging
  image: amirabdi/docker:19.03.7-git-awscli2
  before_script:
    - aws configure set region us-west-2
    - aws configure set aws_access_key_id $AWS_REGISTRY_ID
    - aws configure set aws_secret_access_key $AWS_REGISTRY_SECRET
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI_BASE
    - docker info
  script:
    - export TAG_NAME=development-`git show -s --format=%ct HEAD`-`git rev-parse --short=8 HEAD`
    - echo $TAG_NAME
    - echo "Retagging development image as staging"
    - MANIFEST=$(aws ecr batch-get-image --repository-name offerland/$SERVICE_NAME --image-ids imageTag=$TAG_NAME --query 'images[].imageManifest' --output text)
    - aws ecr put-image --repository-name offerland/$SERVICE_NAME --image-tag $CI_COMMIT_REF_SLUG-latest --image-manifest "$MANIFEST"
  only:
    - staging

retag dev to production:
  stage: retagging
  image: amirabdi/docker:19.03.7-git-awscli2
  before_script:
    - aws configure set region us-west-2
    - aws configure set aws_access_key_id $AWS_REGISTRY_ID
    - aws configure set aws_secret_access_key $AWS_REGISTRY_SECRET
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI_BASE
    - docker info
  script:
    - export TAG_NAME=development-`git show -s --format=%ct HEAD`-`git rev-parse --short=8 HEAD`
    - echo $TAG_NAME
    - echo "Retagging development image as production"
    - MANIFEST=$(aws ecr batch-get-image --repository-name offerland/$SERVICE_NAME --image-ids imageTag=$TAG_NAME --query 'images[].imageManifest' --output text)
    - aws ecr put-image --repository-name offerland/$SERVICE_NAME --image-tag $CI_COMMIT_REF_SLUG-latest --image-manifest "$MANIFEST"
  only:
    - production

# Hit the staging webhook to replace the image
deploy staging:
  stage: deploy
  image: alpine
  script:
    - apk add --update curl jq
    - |
      echo "Getting list of services"
      services=$(curl --no-progress-meter --connect-timeout 5 --retry 5 --request GET "${STAGING_SWARMPIT_URL}api/services" \
        --header 'Accept: application/json' \
        --header "Authorization: Bearer ${PIT_AUTHORIZATION}" \
        --header "offer-dev: ${OFFER_DEV}")
      service_ids=$(echo $services | jq -r ".[] | select (.serviceName | startswith(\"offerland_${SERVICE_NAME}\")) | .id")

      for service_id in $service_ids; do
        echo "Redeploying service ${service_id}"
        url="${STAGING_SWARMPIT_URL}api/services/${service_id}/redeploy"
        curl --no-progress-meter --connect-timeout 5 --retry 5 --request POST "${url}" \
          --header 'Accept: application/json' \
          --header "Authorization: Bearer ${PIT_AUTHORIZATION}" \
          --header "offer-dev: ${OFFER_DEV}"
      done
  only:
    - staging

# Hit the production webhook to replace the image
deploy production:
  stage: deploy
  image: alpine
  script:
    - apk add --update curl jq
    - |
      echo "Getting list of services"
      services=$(curl --no-progress-meter --connect-timeout 5 --retry 5 --request GET "${PRODUCTION_SWARMPIT_URL}api/services" \
        --header 'Accept: application/json' \
        --header "Authorization: Bearer ${PIT_AUTHORIZATION}" \
        --header "offer-dev: ${OFFER_DEV}")
      service_ids=$(echo $services | jq -r ".[] | select (.serviceName | startswith(\"offerland_${SERVICE_NAME}\")) | .id")

      for service_id in $service_ids; do
        echo "Redeploying service ${service_id}"
        url="${PRODUCTION_SWARMPIT_URL}api/services/${service_id}/redeploy"
        curl --no-progress-meter --connect-timeout 5 --retry 5 --request POST "${url}" \
          --header 'Accept: application/json' \
          --header "Authorization: Bearer ${PIT_AUTHORIZATION}" \
          --header "offer-dev: ${OFFER_DEV}"
      done
  only:
    - production

